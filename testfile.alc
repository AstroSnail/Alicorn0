#let x = 621
#let y = 926
#let prim-add = +

let prim-arith-binop = (prim-func-type (a : prim-number) (b : prim-number) -> (c : prim-number))
let prim-sub = (intrinsic "return function(a, b) return a - b end" : prim-arith-binop)

#let prim-sub = (intrinsic "return function(a, b) return a - b end" : (prim-func-type (a : prim-number) (b : prim-number) -> (c : prim-number)))

#let foo = (record (bar = 5) (baz = 6))
#let subbed = prim-sub foo.bar y

# this should error becaused prim-type is not a prim-type and therefore can't be an arg to a prim-func-type
# but it doesn't.
let prim-array-type =
	intrinsic
		""""
			-- terms and terms_gen implicitly in env
			local value = terms.value
			assert(value and value.prim)
			local value_array = terms_gen.declare_array(value)
			local id = value.prim_user_defined_type({name = "array"}, value_array())
			local function mktype(elem)
				print("mktype id", id)
				print("mktype elem", elem)
				return value.prim_boxed_type(id, value_array(elem))
			end
			return mktype
		:
		prim-func-type (T : (boxed prim-type)) -> (array : (boxed prim-type))

let prim-array-set =
	intrinsic
		""""
			local function array_get(_elem_type, array, index, elem)
				array[index] = elem
			end
		:
		prim-func-type (T : (boxed prim-type)) (arr : (unbox prim-type (prim-array-type T))) (index : prim-number) (elem : (unbox prim-type T)) ->

let prim-array-get = 
	intrinsic
		""""
			local function array_get(_elem_type, array, index)
				return array[index]
			end
		:
		prim-func-type (T : (boxed prim-type)) (arr : (unbox prim-type (prim-array-type T))) (index : prim-number) ->  (elem : (unbox prim-type T))


let prim-array-new = 
	intrinsic
		""""
			local function array_get(_elem_type, array)
				return {}
			end
		:
		prim-func-type (T : (boxed prim-type)) ->  (arr : (unbox prim-type (prim-array-type T)))

let array-type =
	lambda ((T : prim-type))
		let (typ) = (prim-array-type (box prim-type T))
		typ
let array-set = 
	lambda (T : prim-type, arr : (array-type T), index : prim-number, elem : T)
		let ( ) = prim-array-set(box(prim-type, T), arr, index, elem)
let array-get = 
	lambda (T : prim-type, arr : (array-type T), index : prim-number)
		let (elem) = prim-array-get(box(prim-type, T), arr, index)
let array-new = 
	lambda ((T : prim-type))
		let (elem) = prim-array-new(box(prim-type, T))

let arr = array-new(prim-number)
array-set(prim-number, arr, 1, 3)
array-set(prim-number, arr, 2, 5)

#let (val) =
#	+ x 5

#let (val) =
#	+ val y

#prim-sub foo.bar val

let (val) = (prim-sub 5 1)
prim-sub val 3

let number-array = (array-type (box prim-type prim-number))

let sub = 
	lambda (x : prim-number, y : prim-number)
		let (val) = (prim-sub x y)
		val

sub 5 (sub 3 2)

sub(array-get(prim-number, arr, 2), array-get(prim-number, arr, 1))
